>> Creational Design Patterns:

    >> Singleton Pattern
    Singleton - Ensure that only one instance of a class is created and provide
    a global access point to the object.

    >> Factory Pattern
    Factory(Simplified version of Factory Method) - Creates objects without
    exposing the instantiation logic to the client and refers to the newly
    created object through a common interface.

    >> Factory Method Pattern
    Factory Method - Defines an interface for creating objects, but let
    subclasses to decide which class to instantiate and refers to the newly
    created object through a common interface.

    >> Abstract Factory Pattern
    Abstract Factory - Offers the interface for creating a family of related
    objects, without explicitly specifying their classes.

    >> Builder Pattern
    Builder - Defines an instance for creating an object but letting subclasses
    decide which class to instantiate and allows a finer control over the
    construction process.

    >> Prototype Pattern
    Prototype - Specify the kinds of objects to create using a prototypical
    instance, and create new objects by copying this prototype.

    >> Object Pool Pattern
    Object Pool - Reuses and shares objects that are expensive to create.

>> Behavioral Design Patterns:

    >> Chain of Responsibility Pattern
    Chain of Responsibiliy - It avoids attaching the sender of a request to its
    receiver, giving this way other objects the possibility of handling the
    request too.
    - The objects become parts of a chain and the request is sent from one
    object to another across the chain until one of the objects will handle it.

    >> Command Pattern
    Command - Encapsulate a request in an object, allows the parameterization
    of clients with different requests and allows saving the requests in a
    queue.

    >> Interpreter Pattern
    Interpreter - Given a language, define a representation for its grammar
    along with an interpreter that uses the representation to interpret
    sentences in the language.
    - Map a domain to a language, the language to a grammar and the grammar to
    a hierarchical object-oriented design

    >> Iterator Pattern
    Iterator - Provide a way to access the elements of an aggregate object
    sequentially without exposing its underlying representation.

    >> Mediator Pattern
    Mediator - Define an object that encapsulates how a set of objects
    interact. Mediator promotes loose coupling by keeping objects from
    referring to each other explicitly and it lets you vary their interaction
    independently.

    >> Observer Pattern
    Observer - Define a one-to-many dependency between objects so that when one
    object changes state, all its dependents are notified and updated
    automatically.

    >> Strategy Pattern
    Strategy - Define a family of algorithms, encapsulate each one and make
    them interchangeable. Strategy lets the algorithm vary independently from
    clients that use it.

    >> Template Method
    Template Method - Define the skeleton of an algorithm in an operation,
    deferring some steps to subclasses.
    - Template Method lets subclasses redefine certain steps of an algorithm
    without letting them to change the algorithm's structure.

    >> Visitor Pattern
    Visitor - Represents an operation to be performed on the elements of an
    object structure.
    - Visitor lets you define a new operation without changing the classes of
    the elements on which it operates.

    >> Null Object Pattern
    Null Object - Provide an object as a surrogate for the lack of an object of
    a given type.
    - The Null Object Pattern provides intelligent do nothing behavior, hiding the
    details from its collaborators.
